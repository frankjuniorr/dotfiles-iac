---

- name: "Incluir variáveis específicas para o SO"
  ansible.builtin.include_vars:
    file: "group_vars/{{ os }}.yaml"
  when: os_type is defined

- name: "get list of files from URL"
  ansible.builtin.uri:
    url: "{{ iso_base_url }}"
    return_content: yes
  register: page_content

- name: "Arch | Extract most recent filename"
  ansible.builtin.set_fact:
    iso_file: "{{ page_content.content | regex_findall('archlinux-\\d{4}\\.\\d{2}\\.\\d{2}-x86_64\\.iso') | first }}"
  when: vm_user == 'arch'

- name: "Ubuntu | Extract most recent filename"
  ansible.builtin.set_fact:
    iso_file: "{{ page_content.content | regex_findall('ubuntu-\\d{2}\\.\\d{2}\\.\\d-desktop-amd64\\.iso') | first }}"
  when: vm_user == 'ubuntu'

- name: "Define Complete URL"
  ansible.builtin.set_fact:
    iso_url: "{{ iso_base_url }}{{ iso_file }}"

- name: "Debug Complete URL"
  debug:
    msg: "{{ iso_url }}"

- name: "Check if ISO file exists"
  ansible.builtin.stat:
    path: "{{ iso_directory }}/{{ iso_file }}"
  register: iso_stat


- name: "Donwload ISO file"
  ansible.builtin.get_url:
    url: "{{ iso_url }}"
    dest: "{{ iso_directory }}"
  when: not iso_stat.stat.exists

- name: "Check if VM already exist"
  ansible.builtin.shell: qm list | grep -q "{{ vm_template_id }}"
  register: vm_exists
  failed_when: "vm_exists.rc == 1 and 'non-zero return code' in vm_exists.stderr"
  ignore_errors: yes

- name: "Create VM"
  ansible.builtin.shell: "{{ item }}"
  loop:
    - "qm create {{ vm_template_id }} --name {{ vm_template_name }}"
    - "qm set {{ vm_template_id }} --tags dotfiles"
    - "qm set {{ vm_template_id }} --sockets {{ sockets }} --cores {{ cores }}"
    - "qm set {{ vm_template_id }} --memory {{ memory }}"
    - "qm set {{ vm_template_id }} --net0 virtio,bridge=vmbr0"
    - "qm set {{ vm_template_id }} --scsihw virtio-scsi-pci"
    - "qm set {{ vm_template_id }} --ostype l26"
    - "pvesm alloc {{ vm_storage }} {{ vm_template_id }} vm-{{ vm_template_id }}-disk-0 {{ disk_size }}"
    - "qm set {{ vm_template_id }} --scsi0  {{ vm_storage }}:vm-{{ vm_template_id }}-disk-0"
    - "qm set {{ vm_template_id }} --boot c"
    - "qm set {{ vm_template_id }} --bootdisk ide2"
    - "qm set {{ vm_template_id }} --cdrom {{ iso_storage }}:iso/{{ iso_url | basename }}"
    - "qm set {{ vm_template_id }} --agent enabled=1"
    - "qm set {{ vm_template_id }} --serial0 socket"
    - "qm set {{ vm_template_id }} --vga qxl,memory=125"
  when: vm_exists.rc != 0

# Deploy Notes
###############################################################
- name: "Deploy VM Notes to /tmp"
  template:
    src: notes.md.j2
    dest: "/tmp/notes_creation.md"

- name: "Apply Notes content"
  ansible.builtin.shell: |
    qm set {{ vm_template_id }} --description "$(cat /tmp/notes_creation.md)"

- name: "Remove a VM notes files"
  ansible.builtin.file:
    path: "/tmp/notes_creation.md"
    state: absent
